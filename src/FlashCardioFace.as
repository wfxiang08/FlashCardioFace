package {	import com.chunyu.algorithm.CardioFaceHandler;	import com.chunyu.algorithm.CardioFaceHandlerDelegate;	import com.chunyu.capture.CameraBitmap;	import com.chunyu.ui.CustomSimpleButton;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Graphics;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Matrix;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.utils.ByteArray;	import flash.utils.getTimer;	import flash.utils.setTimeout;
		public class FlashCardioFace extends Sprite implements CardioFaceHandlerDelegate {		private var debug :Boolean = true;		// 添加成员变量		private var _videoView :Sprite;		private var _faceRectView:Sprite;		private var _featurePointsView: Sprite;		private var _originalSignalView: Sprite;		private var _fftView: Sprite;		private var tf :TextField;				private var camera:CameraBitmap;		private var scaleFactor:int = 4;				// 这个正是我所期待的大小， 希望能够在不同的系统上都能够运行		private var kVideoWidth:int = 640;		private var kVideoHeight:int = 480;		private var kFramerate:int = 24; // 可以考虑把FFT点数增加		private var lastTimer:int = 0;				private var __txtFrameRate: TextField;		private var __txtHeartRate: TextField;		private var __handler: CardioFaceHandler;				private var __buttonStart: SimpleButton;		private var __buttonStop: SimpleButton;		public function FlashCardioFace() {			__handler = new CardioFaceHandler(kFramerate, this);			initializeUI();						addEventListener(Event.ENTER_FRAME, updateBlocks);		}		private function updateBlocks(e:Event):void  {			camera.sampleAndPaint(null);		}		private function initializeUI():void{			var myFormat:TextFormat;			if (!("mStartButton" in this)) {				stage.scaleMode = StageScaleMode.NO_SCALE;				stage.align = StageAlign.TOP_LEFT;				stage.stageWidth = 750;				stage.stageHeight = 640;				stage.frameRate = kFramerate;			}						//stage.frameRate = kFramerate;			_videoView = new Sprite;			_videoView.x = 0;			_videoView.y = 0;			addChild(_videoView);						var iphoneDownloadUrl:String = "http://itunes.apple.com/us/app/chun-yu-xin-jing-zui-zhun/id530052824?ls=1&mt=8";			// 设置数据源			camera = new CameraBitmap(kVideoWidth, kVideoHeight, kFramerate);						var noCameraMsg: SimpleButton = null;			var mLogo: SimpleButton = null;						if ("mNoCameraMsg" in this) {				noCameraMsg = this["mNoCameraMsg"];			}			if ("mStartButton" in this) {				__buttonStart = this["mStartButton"];			}			if ("mStopButton" in this) {				__buttonStop = this["mStopButton"];			}			if ("mLogo" in this) {				mLogo = this["mLogo"];			}						if ("mCopyRightButton" in this) {				var mCopyRightButton: SimpleButton = this["mCopyRightButton"];				mCopyRightButton.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {					flash.net.navigateToURL(new flash.net.URLRequest("http://www.chunyu.me"),"_blank");				});			}			if (!camera.isCameraAvailable()) {				// 添加异常处理				if (__buttonStop) {					__buttonStop.visible = false;				}				if (__buttonStart) {					__buttonStart.visible = false;				}				if (mLogo) {					removeChild(mLogo);					addChild(mLogo);					mLogo.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {						flash.net.navigateToURL(new flash.net.URLRequest(iphoneDownloadUrl),"_blank");					});				}								return;			} else {				if (__buttonStop) {					__buttonStop.visible = false;				}				if (noCameraMsg) {					noCameraMsg.visible = false;				}			}			camera.addEventListener(Event.RENDER, onVideoFrameReadyHandler);						_videoView.addChild(new Bitmap(camera.bitmapData));									_faceRectView = new Sprite();			_faceRectView.x = 0;			_faceRectView.y = 0;			_videoView.addChild(_faceRectView);						_faceRectView.graphics.lineStyle(5, 0xFF4444, 1);			_faceRectView.graphics.drawRect(__handler.kStartX, __handler.kStartY, __handler.kRoiWidth, __handler.kRoiHeight);			_featurePointsView = new Sprite();			_featurePointsView.x = 0;			_featurePointsView.y = 0;			// _featurePointsView.cacheAsBitmap = true;			_videoView.addChild(_featurePointsView);						_originalSignalView = new Sprite();			_originalSignalView.x = 0;			_originalSignalView.y = 480;			addChild(_originalSignalView);						_fftView = new Sprite();			_fftView.x = 450;			_fftView.y = 480;			addChild(_fftView);						{				// 设置采样率的结果				__txtHeartRate = new TextField();				__txtHeartRate.multiline = false;				__txtHeartRate.x = 170;				__txtHeartRate.y = 22;				__txtHeartRate.height = 55;				__txtHeartRate.width = 300; // 640 - 300				__txtHeartRate.textColor = 0x0000FF;				myFormat = new TextFormat();				myFormat.size = 42;				myFormat.align = flash.text.TextFormatAlign.CENTER;				myFormat.leading = 5;				__txtHeartRate.defaultTextFormat = myFormat;												__txtHeartRate.text = "";				_videoView.addChild(__txtHeartRate);			}						// 按钮						if (__buttonStop) {				__buttonStop.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {					__handler.isRunning = false;					__buttonStop.visible = false;					__buttonStart.visible = true;				});				__buttonStart.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {					__handler.isRunning = true;					__buttonStop.visible = true;					__buttonStart.visible = false;									});			} else {				 var button1:CustomSimpleButton = new CustomSimpleButton();				 button1.x = 660;				 button1.y = 20;				 addChild(button1);				 button1.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {					 __handler.isRunning = !__handler.isRunning;				 });			} 			{				// 设置采样率的结果				__txtFrameRate = new TextField();				__txtFrameRate.x = kVideoWidth + 6;				__txtFrameRate.y = 110;				__txtFrameRate.height = 24;				__txtFrameRate.width = 100;				__txtFrameRate.textColor = 0xFF0000;								myFormat = new TextFormat();				myFormat.size = 18;				__txtFrameRate.defaultTextFormat = myFormat;				addChild(__txtFrameRate);			}								if (mLogo) {				removeChild(mLogo);				addChild(mLogo);				mLogo.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {					flash.net.navigateToURL(new flash.net.URLRequest(iphoneDownloadUrl),"_blank");				});			}		}		public function updateRunningStatus(isRunning:Boolean, isSucceed: Boolean): void {			if (isRunning) {				__txtHeartRate.text = "";				_faceRectView.alpha = 1;				_featurePointsView.visible = true;				__buttonStart.visible = false;				__buttonStop.visible = true;				_fftView.graphics.clear();			} else {				_faceRectView.alpha = 0.5;				_featurePointsView.visible = false;				__buttonStart.visible = true;				__buttonStop.visible = false;							}		}		// 数据Ready(CameraBitmap获取到一桢新的数据)		private function onVideoFrameReadyHandler( event:Event ):void {			var start:int = getTimer();			var interval:int = start - lastTimer;			lastTimer = start;			// ba中的像素的格式: AGRB			var ba:ByteArray = camera.bitmapData.getPixels(camera.bitmapData.rect);						__handler.handleVideoFrame(ba);						start = getTimer() - start;						__txtFrameRate.text = "采样率: " + format(camera.getCurrentFps(), 1);		}			public function updateHeartRate(hr:Number): void {			if (__txtHeartRate.y > 100) {				__txtHeartRate.y = 45;				__txtHeartRate.textColor = 0x0000FF;								_faceRectView.alpha = 1;				_featurePointsView.visible = true;			}						__txtHeartRate.text = "当前心跳: " + this.format(hr, 1);		}		public function updateFinalHeartRate(hr: Number): void {			__txtHeartRate.y = 120;			__txtHeartRate.textColor = 0xFF0000;			__txtHeartRate.text = "最终心跳: " + Math.round(hr);						_faceRectView.alpha = 0.8;			_featurePointsView.visible = false;		}		public function updateFFTCurve(normalizedPsdData: ByteArray, psdNum: int):void {			// return;			// trace("updateFFTCurve: ", psdNum);			var g:Graphics = _fftView.graphics;			g.clear();						var _fftFreqStep: Number = kFramerate * 60.0 / 1024.0; 			var _fftFreqStepInv: Number = 1.0 / _fftFreqStep;			// 绘制FFT的参考线条			g.lineStyle(1, 0x00FF00, alpha=0.5);			g.moveTo(50 * _fftFreqStepInv * 2, 10);			g.lineTo(50 * _fftFreqStepInv * 2, 160);			g.moveTo(75 * _fftFreqStepInv * 2, 10);			g.lineTo(75 * _fftFreqStepInv * 2, 160);			g.moveTo(100 * _fftFreqStepInv * 2, 10);			g.lineTo(100 * _fftFreqStepInv * 2, 160);			g.lineStyle(1, 0xFFFF00, alpha=1);			// 绘制曲线			var drawCoords:Vector.<Number> = new Vector.<Number>();			var drawCommands:Vector.<int> = new Vector.<int>();			normalizedPsdData.position = 0;						drawCommands.push(1);			drawCoords.push(0, Math.max(160 - normalizedPsdData.readFloat(), 0));			for (var i: int = 1; i < psdNum; i++) {				drawCommands.push(2);				drawCoords.push(i * 2, Math.max(160 - normalizedPsdData.readFloat(), 0));				}						g.drawPath(drawCommands, drawCoords);		}			public function updateRealTimeCurve(realData: ByteArray, len: int): void {			var g:Graphics = _originalSignalView.graphics;			g.clear();						// 绘制参考线			g.lineStyle(1, 0x00FF00);			g.moveTo(0, 80);			g.lineTo(300, 80);						g.lineStyle(1, 0xFF00FF);						// 绘制曲线			var drawCoords:Vector.<Number> = new Vector.<Number>();			var drawCommands:Vector.<int> = new Vector.<int>();			realData.position = 0;			drawCommands.push(1);			drawCoords.push(0, realData.readFloat() + 80);			for (var i: int = 1; i < len; i++) {				drawCommands.push(2);				drawCoords.push(i, realData.readFloat() + 80);				}						g.drawPath(drawCommands, drawCoords);		}		public function updateTrackingFeaturePoints(featurePoints:ByteArray): void {						// trace("Feature Points updated");			var g:Graphics =  _featurePointsView.graphics;						g.clear();			g.lineStyle(1, 0x00FF00);						var features:ByteArray = featurePoints;			features.position = 0;			var accumOffsetX:Number = features.readFloat();			var accumOffsetY:Number = features.readFloat();			g.drawRect(__handler.kStartX + accumOffsetX, __handler.kStartY + accumOffsetY, 					   __handler.kRoiWidth, __handler.kRoiHeight);			var tmpx:Number;			var tmpy:Number;						for (var i: int = 1; i <= 6; i++) {				tmpx = features.readFloat();				tmpy = features.readFloat();				g.drawRect(tmpx - 2, tmpy - 2, 4, 4);			}		}		private function format(num: Number, precision: int, splitCharacter:String="."): String {			if(precision == 0) { 				return "" + Math.round(num);			} else {				return  Math.round(num) + splitCharacter + Math.round(num * Math.pow( 10, precision)).toString().substr(-precision);			}		}	}	}